{"version":3,"sources":["features/calculator/Calculator.module.css","features/calculator/calculatorSlice.js","features/calculator/Calculator.js","App.js","app/store.js","index.js"],"names":["module","exports","calculatorSlice","createSlice","name","initialState","current","previous","calculation","result","reducers","appendCurrent","state","action","payload","setCurrent","clearCurrent","setPrevious","appendCalculation","setCalculation","clearCalculation","allClear","setResult","clearResult","actions","selectCalculation","calculator","selectResult","checkInput","input","dispatch","getState","selectPrevious","regex","length","includes","test","Calculator","useSelector","useDispatch","className","styles","container","id","display","buttons","btn","onClick","red","newCurrent","slice","newCalculation","spantwo","fixFirst","match","substring","cleanedCalc","replace","inputs","split","operators","numbers","forEach","item","push","parseFloat","first","calc","i","second","toFixed","toString","href","target","rel","footer","App","store","configureStore","reducer","calculatorReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00bc8e01.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Calculator_container__mzWPR\",\"buttons\":\"Calculator_buttons__3fg75\",\"btn\":\"Calculator_btn___TiK2\",\"spantwo\":\"Calculator_spantwo__2nzjG\",\"red\":\"Calculator_red__1OPwm\",\"display\":\"Calculator_display__ZdP0G\",\"calculation\":\"Calculator_calculation__2WnWh\",\"result\":\"Calculator_result__3Rr2n\",\"operand\":\"Calculator_operand__pqqhX\",\"footer\":\"Calculator_footer__3EiGu\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    current: \"\",        // Current number input\r\n    previous: \"\",       // Previous input mostly from input validation\r\n    calculation: \"\",    // Keep track of the whole calculation input       \r\n    result: \"\",         // Result of the calculation      \r\n}\r\n\r\nexport const calculatorSlice = createSlice ({\r\n    name: 'calculator',\r\n    initialState,\r\n    reducers: {\r\n        appendCurrent: (state, action) => {\r\n            state.current += action.payload;\r\n        },\r\n        setCurrent: (state, action) => {\r\n            state.current = action.payload;\r\n        },\r\n        clearCurrent: (state) => {\r\n            state.current = \"\";\r\n        },\r\n        setPrevious: (state, action) => {\r\n            state.previous = action.payload;\r\n        },\r\n        appendCalculation: (state, action) => {\r\n            state.calculation += action.payload;\r\n        },\r\n        setCalculation: (state, action) => {\r\n            state.calculation = action.payload;\r\n        },\r\n        clearCalculation: (state) => {\r\n            state.calculation = \"\";\r\n        },\r\n        allClear: (state) => {\r\n            state.current = \"\";\r\n            state.previous = \"\";\r\n            state.calculation = \"\";\r\n            state.result = \"0\";\r\n        },\r\n        setResult: (state, action) => {\r\n            state.result = action.payload;\r\n        },\r\n        clearResult: (state) => {\r\n            state.result = \"\";\r\n        },\r\n    }\r\n})\r\n\r\nexport const { appendCurrent, setCurrent, clearCurrent, setPrevious, appendCalculation, setCalculation, clearCalculation, allClear, setResult, clearResult } = calculatorSlice.actions;\r\n\r\nexport const selectCalculation = (state) => state.calculator.calculation;\r\nexport const selectResult = (state) => state.calculator.result;\r\nexport const selectCurrent = (state) => state.calculator.current;\r\nexport const selectPrevious = (state) => state.calculator.previous;\r\n\r\n// Handles delete function of the input\r\nexport const checkDelete = () => (dispatch, getState) => {\r\n    const calculation = selectCalculation(getState());\r\n    const current = selectCalculation(getState());\r\n\r\n    // if there is nothing to delete -> ignore it\r\n    if (calculation.length === 0) {\r\n        return\r\n    }\r\n\r\n    if (current.length !== 0) {\r\n        const newCurrent = current.slice(0, -1);\r\n        dispatch(setCurrent(newCurrent))\r\n    }\r\n    \r\n    const newCalculation = calculation.slice(0, -1);\r\n    dispatch(setCalculation(newCalculation))\r\n}\r\n\r\n// Handles input validation for calculator \r\nexport const checkInput = (input) => (dispatch, getState) => {\r\n    const current = selectCurrent(getState());\r\n    const previous = selectPrevious(getState());\r\n    const calculation = selectCalculation(getState());\r\n    const regex = /[*/+-]/\r\n\r\n    // prevent multiple zeroes in the beginning\r\n    if (previous === \"0\" && current.length === 1 && input === \"0\") {\r\n        return;\r\n    }\r\n\r\n    // prevent multiple decimals in one number\r\n    if (input === \".\" && current.includes(\".\")) {\r\n        return;\r\n    }\r\n\r\n    // prevent multiple operands\r\n    if (regex.test(input) && regex.test(previous) && input !== \"-\") {\r\n        return;\r\n    }   \r\n\r\n    // prevent too many negative signs\r\n    if (previous === \"-\" && input === \"-\" ) {\r\n        const twoDown = calculation[calculation.length-2];\r\n        // Triple negative\r\n        if(twoDown === \"-\") {\r\n            return;\r\n        }\r\n        // Cannot start with --\r\n        if(calculation.length === 1) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    // if input is operand -> start inputting new current number else append to current\r\n    if (regex.test(input)) {\r\n        dispatch(clearCurrent());\r\n    } else {\r\n        dispatch(appendCurrent(input));\r\n    }\r\n\r\n    dispatch(appendCalculation(input));\r\n    dispatch(setPrevious(input));\r\n}\r\n\r\n// Handles calculation \r\nexport const calculateResult = () => (dispatch, getState) => {\r\n    const regex = /[*/+-]/g\r\n    const regexDouble = /--|\\+-|\\*-|\\/-|[*/+-]/g\r\n    let fixFirst = false;\r\n    let calculation = selectCalculation(getState());\r\n\r\n    // If there is not calculation --> Leave\r\n    if (calculation.length === 0) {\r\n        return\r\n    }\r\n\r\n    // Clean operators from the end \r\n    const lastInCalculation = calculation[calculation.length-1];\r\n    if(lastInCalculation.match(regex)) {\r\n        calculation = calculation.slice(0, -1);\r\n    }\r\n\r\n    //Check first number for negative\r\n    const firstInCalculation = calculation[0];\r\n    if (firstInCalculation === \"-\") {\r\n        calculation = calculation.substring(1);\r\n        fixFirst = true;\r\n    }\r\n\r\n    // Check for inputs like 25x-5 and clean away negative sign. Negative numbers are handled in switch statement\r\n    let cleanedCalc = calculation.replace(/--/g, \"-\");\r\n    cleanedCalc = cleanedCalc.replace(/\\+-/g, \"+\");\r\n    cleanedCalc = cleanedCalc.replace(/\\*-/g, \"*\");\r\n    cleanedCalc = cleanedCalc.replace(/\\/-/g, \"/\");\r\n\r\n    // Get numbers and operands from calculation string\r\n    const inputs = cleanedCalc.split(regex);\r\n    const operators = calculation.match(regexDouble);\r\n    // if only one number on calculation -> set it to result\r\n    if(inputs.length === 1) {\r\n        dispatch(setResult(inputs[0]));\r\n        return\r\n    }\r\n    \r\n    // Parse string values to numbers \r\n    let numbers = []\r\n    inputs.forEach(item => numbers.push(parseFloat(item)));\r\n    let first = numbers[0];\r\n    // If -negative sign at start fix firstnumber to negative\r\n    if (fixFirst) {\r\n        first = -first;\r\n    }\r\n\r\n    // Loop throw all the numbers and perform calculation according to operator --> set it to result\r\n    let calc = 0;\r\n    for (let i = 1; i < numbers.length; i++) {\r\n        let second = numbers[i];\r\n        let operand = operators[i - 1];\r\n        calc = first;\r\n\r\n        switch (operand){\r\n            case \"+\":\r\n                calc += second;\r\n                first = calc;\r\n                break;\r\n            case \"-\":\r\n                calc -= second;\r\n                first = calc;\r\n                break;\r\n            case \"*\":\r\n                calc *= second;\r\n                first = calc;\r\n                break;\r\n            case \"/\":\r\n                calc /= second;\r\n                first = calc;\r\n                break;\r\n            // These cases handle negative values inputted after operators \r\n            case \"+-\":\r\n                calc += -second;\r\n                first = calc;\r\n                break;\r\n            case \"--\":\r\n                calc -= -second;\r\n                first = calc;\r\n                break;\r\n            case \"*-\":\r\n                calc *= -second;\r\n                first = calc;\r\n                break;\r\n            case \"/-\":\r\n                calc /= -second;\r\n                first = calc;\r\n                break;\r\n            default:\r\n                break;\r\n            \r\n        }\r\n    }\r\n    if (calc % 1 !== 0) {\r\n        calc = calc.toFixed(4);\r\n    }\r\n    \r\n    dispatch(setResult(calc.toString()));\r\n}\r\n\r\nexport default calculatorSlice.reducer;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {   \r\n    calculateResult,\r\n    checkInput,\r\n    checkDelete,\r\n    selectResult,\r\n    selectCalculation,\r\n    allClear,\r\n    setCalculation,\r\n} from './calculatorSlice';\r\nimport styles from './Calculator.module.css';\r\n\r\nexport function Calculator() {\r\n    const result = useSelector(selectResult);\r\n    const calculation = useSelector(selectCalculation);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div id=\"display\" className={styles.display}>\r\n                <p className={styles.calculation}>{calculation}</p>\r\n                <h4 className={styles.result}>{result}</h4>\r\n            </div>\r\n\r\n            <div className={styles.buttons}>\r\n                <button id=\"seven\" className={styles.btn} onClick={() => dispatch(checkInput(\"7\"))}>7</button>\r\n                <button id=\"eight\" className={styles.btn} onClick={() => dispatch(checkInput(\"8\"))}>8</button>\r\n                <button id=\"nine\" className={styles.btn} onClick={() => dispatch(checkInput(\"9\"))}>9</button>\r\n                <button id=\"add\" className={styles.btn} onClick={() => dispatch(checkInput(\"+\"))}>+</button>\r\n\r\n                <button id=\"four\" className={styles.btn} onClick={() => dispatch(checkInput(\"4\"))}>4</button>\r\n                <button id=\"five\" className={styles.btn} onClick={() => dispatch(checkInput(\"5\"))}>5</button>\r\n                <button id=\"six\" className={styles.btn} onClick={() => dispatch(checkInput(\"6\"))}>6</button>\r\n                <button id=\"subtract\" className={styles.btn} onClick={() => dispatch(checkInput(\"-\"))}>-</button>\r\n\r\n                <button id=\"one\" className={styles.btn} onClick={() => dispatch(checkInput(\"1\"))}>1</button>\r\n                <button id=\"two\" className={styles.btn} onClick={() => dispatch(checkInput(\"2\"))}>2</button>\r\n                <button id=\"three\" className={styles.btn} onClick={() => dispatch(checkInput(\"3\"))}>3</button>\r\n                <button id=\"multiply\" className={styles.btn} onClick={() => dispatch(checkInput(\"*\"))}>*</button>\r\n\r\n                <button id=\"zero\" className={styles.btn} onClick={() => dispatch(checkInput(\"0\"))}>0</button>\r\n                <button id=\"decimal\" className={styles.btn} onClick={() => dispatch(checkInput(\".\"))}>.</button>\r\n                <button className={styles.btn} onClick={() => dispatch(setCalculation(result))}>ANS</button>\r\n                <button id=\"divide\" className={styles.btn} onClick={() => dispatch(checkInput(\"/\"))}>/</button>\r\n                \r\n                <button className={`${styles.btn} ${styles.red}`} onClick={() => dispatch(checkDelete())}>DEL</button>\r\n                <button id=\"clear\" className={`${styles.btn} ${styles.red}`}onClick={() => dispatch(allClear())}>AC</button>\r\n                <button id=\"equals\" className={`${styles.btn} ${styles.spantwo}`} onClick={() => dispatch(calculateResult())}>=</button>\r\n            </div>\r\n            <a href=\"https://github.com/tonikv\" target=\"_blank\" rel=\"noreferrer\" className={styles.footer}> Calculator by tonikv </a>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport { Calculator } from './features/calculator/Calculator';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport calculatorReducer from '../features/calculator/calculatorSlice';\n\nexport const store = configureStore({\n  reducer: {\n    calculator: calculatorReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}